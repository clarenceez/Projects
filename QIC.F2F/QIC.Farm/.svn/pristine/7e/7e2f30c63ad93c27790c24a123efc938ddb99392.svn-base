using log4net;
using QIC.Farm.Service;
using QIC.Farm.Service.Dto;
using QIC.Farm.WebApi.Common;
using QIC.Farm.WebApi.Dtos;
using QIC.Farm.WebApi.Enums;
using QIC.Infrastructure.ValidCodeManagement;
using QIC.Infrastructure.ValidCodeManagement.Enums;
using QIC.Infrastructure.WebApiFramework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using QIC.Infrastructure.Common.Utilities;
using QIC.Infrastructure.ValidCodeManagement.Dtos;

namespace QIC.Farm.WebApi.Controllers
{
    public class WechatController : ApiController
    {
        private ILog logger = Logger.GetLogger();

        private FarmService farmService = new FarmService();

        //登录
        [HttpGet, HttpPost]
        public void Login()
        {

        }
       
        //判断会员是否存在
        [HttpGet,HttpPost]
        public BooleanResult IsMemberExist(string openID)
        {
            BooleanResult result = BooleanResult.False;
            try
            {
                var exist = farmService.IsUserExist(openID);
                result = exist ? BooleanResult.True : BooleanResult.False;
            }
            catch (Exception ex)
            {
                result = BooleanResult.SystemError;
                if (logger.IsErrorEnabled)
                {
                    logger.Error(new { Method = "IsMemberExist", Param = new { openID = openID }, Result = result }, ex);
                }
            }
            finally
            {
                if (logger.IsInfoEnabled)
                {
                    logger.Info(new { Method = "IsMemberExist", Param = new { openID = openID }, Result = result });
                }
            }
            return result;
        }


        //通过手机号查询会员信息
        //[Token(typeof(MemTokenHelper), false)]
        [HttpGet, HttpPost]
        public FamilyInfoDto GetUserInfoByPhoneNumber(string phoneNumber)
        {
            FamilyInfoDto result = null;
            try
            {
                result = farmService.GetFamilyInfoByPhoneNumber(phoneNumber);
            }
            catch (Exception ex)
            {
                if (logger.IsErrorEnabled)
                {
                    logger.Error(new { Method = "GetUserInfoByPhoneNumber", Param = new { phoneNumber = phoneNumber }, Result = result.ToJson() }, ex);
                }
            }
            finally
            {
                if (logger.IsInfoEnabled)
                {
                    logger.Info(new { Method = "GetUserInfoByPhoneNumber", Param = new { phoneNumber = phoneNumber }, Result = result.ToJson() });
                }
            }
            return result;
        }

        //获取绑定用户的验证码
        [HttpGet, HttpPost]
        public CommonResult<string> GetMobileCaptchaForBindUser(string phoneNumber)
        {
            CommonResult<string> result = new CommonResult<string>();
            try
            {
                var mobileValidCode = ValidCodeFactory.GetValidCode(SendMethod.Mobile);
                var captchaResult = mobileValidCode.SendValidCode("BindUser", phoneNumber, "zh-cn");
                result.Data = captchaResult.Data as string;
                return result;
            }
            catch (Exception ex)
            {
                if (logger.IsErrorEnabled)
                {
                    logger.Error(new { Method = "GetMobileCaptchaForBindUser", Param = new { phoneNumber = phoneNumber }, Result = result.ToJson() }, ex);
                }
            }
            finally
            {
                if (logger.IsInfoEnabled)
                {
                    logger.Info(new { Method = "GetMobileCaptchaForBindUser", Param = new { phoneNumber = phoneNumber }, Result = result.ToJson() });
                }
            }
            return result;
        }

        //绑定用户
        [HttpGet, HttpPost]
        public BindUserResult BindUser(string openID, string phoneNumber, string captcha)
        {
            BindUserResult result = new BindUserResult();
            try
            {
                //验证验证码
                var validCode = ValidCodeFactory.GetValidCode(SendMethod.Mobile);
                if (!validCode.CheckValidCode("BindUser", phoneNumber, captcha))
                {
                    result.BindUserError = BindUserError.CaptchaError;
                    result.Message = "验证码错误";
                    return result;
                }

                //给对应手机号的会员加上openID
                var r = farmService.SetOpenIDByPhone(phoneNumber, openID);
                if (r)
                {
                    result.Message = "绑定成功";
                    result.BindUserError = BindUserError.Success;
                }
                else
                {
                    result.Message = "系统错误";
                    result.BindUserError = BindUserError.SystemError;
                }
            }
            catch (Exception ex)
            {
                result.BindUserError = BindUserError.SystemError;
                if (logger.IsErrorEnabled)
                {
                    logger.Error(new { Method = "BindUser", Param = new { openID = openID, phoneNumber = phoneNumber, captcha = captcha }, Result = result.ToJson() }, ex);
                }
            }
            finally
            {
                if (logger.IsInfoEnabled)
                {
                    logger.Info(new { Method = "BindUser", Param = new { openID = openID, phoneNumber = phoneNumber, captcha = captcha }, Result = result.ToJson() });
                }
            }

            return result;
        }
    }
}
