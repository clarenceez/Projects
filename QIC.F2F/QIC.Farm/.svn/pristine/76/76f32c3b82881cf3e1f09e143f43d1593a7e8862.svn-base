using QIC.Infrastructure.Common.Safety;
using QIC.Infrastructure.Common.Safety.Dto;
using QIC.Infrastructure.TokenSafetyParamClient;
using QIC.Infrastructure.TokenSafetyParamClient.TokenService;
using QIC.Infrastructure.WebFramework.Model;
using System;
using System.Web;
using QIC.Infrastructure.WebFramework.Token;

namespace QIC.Farm.WebApi.Common
{
    public abstract class TokenHelper : ITokenHelper
    {
        protected byte mcID;

        protected int scID;

        private string agentKey = "QIC";

        private string tokenKey = "Authorization";

        private string tokenHeaderValue;

        private string agentHeaderValue;

        private TokenManagement<PayloadDto> tokerManager;

        private PayloadResult<PayloadDto> payload;

        private bool allowTouristMode;

        protected virtual string AgentKey
        {
            get
            {
                return this.agentKey;
            }
        }

        protected virtual string TokenKey
        {
            get
            {
                return this.tokenKey;
            }
        }

        private TokenHelper(bool allowTourist)
        {
            this.allowTouristMode = allowTourist;
        }

        public TokenHelper(HttpContext context, bool allowTourist)
        {
            this.allowTouristMode = allowTourist;
            this.AnalyzeParam(context);
        }

        public TokenHelper(HttpContextBase context, bool allowTourist)
        {
            this.allowTouristMode = allowTourist;
            this.AnalyzeParam(context);
        }

        public virtual void TokenVerification()
        {
            if (this.tokerManager == null)
            {
                throw new ArgumentException("Toker manager is null.", "tokerManager");
            }
            this.payload = this.tokerManager.ValidateToken(this.tokenHeaderValue);
            if (this.payload.Result != AuthResult.Success)
            {
                TokenException.ThrowTokenException(this.payload.Result);
            }
            PayloadDto dto = this.payload.Payload;
            this.CheckOpenID(dto);
        }

        protected virtual void CheckOpenID(PayloadDto dto)
        {
            if (dto.Tourist)
            {
                if (this.allowTouristMode)
                {
                    return;
                }
                TokenException.ThrowTokenException(AuthResult.RefuseTourist);
            }
            if (string.IsNullOrEmpty(dto.OpenID))
            {
                TokenException.ThrowTokenException(AuthResult.AccountInvalid);
            }
        }

        public virtual PayloadResult<PayloadDto> GetPayload()
        {
            if (this.payload != null)
            {
                return this.payload;
            }
            if (this.tokerManager == null)
            {
                throw new ArgumentException("Toker manager is null.", "tokerManager");
            }
            return this.tokerManager.ValidateToken(this.tokenHeaderValue);
        }

        public virtual AccountDto GetAccountInfo()
        {
            AccountDto accountDto = new AccountDto
            {
                MCID = this.mcID,
                SCID = this.scID
            };
            if (this.payload != null)
            {
                if (this.payload.Payload.Tourist)
                {
                    accountDto.OpenID = null;
                }
                else
                {
                    accountDto.OpenID = this.payload.Payload.OpenID;
                }
            }
            return accountDto;
        }

        private void GetTokenManagement()
        {
            TokenParamModel tokenParam = this.GetTokenParam(this.agentHeaderValue);
            if (tokenParam == null)
            {
                throw new ArgumentException("Agent code is error.", "AgentCode");
            }
            string shareKey = tokenParam.ShareKey;
            string secretKey = tokenParam.SecretKey;
            ulong tokenExpiredTime = tokenParam.TokenExpiredTime;
            string signature = tokenParam.Signature;
            if (string.IsNullOrEmpty(this.tokenHeaderValue))
            {
                throw new ArgumentNullException("Token", "Token code is null.");
            }
            this.tokerManager = new TokenManagement<PayloadDto>(shareKey, secretKey, signature, tokenExpiredTime, 600uL);
        }

        protected virtual TokenParamModel GetTokenParam(string agentValue)
        {
            TokenParamDto tokenParam = TokenParamManager.GetTokenParam(agentValue);
            if (tokenParam == null)
            {
                return null;
            }
            this.mcID = tokenParam.MCID;
            this.scID = tokenParam.SCID;
            return new TokenParamModel
            {
                MCID = tokenParam.MCID,
                SCID = tokenParam.SCID,
                SecretKey = tokenParam.SecretKey,
                ShareKey = tokenParam.ShareKey,
                Signature = tokenParam.Signature,
                TokenExpiredTime = tokenParam.TokenExpiredTime
            };
        }

        private void AnalyzeParam(HttpContext context)
        {
            string value = context.Request.Headers[this.TokenKey];
            if (string.IsNullOrEmpty(value))
            {
                throw new ArgumentNullException("Token", "Token code is null.");
            }
            string value2 = context.Request.Headers[this.AgentKey];
            if (string.IsNullOrEmpty(value2))
            {
                throw new ArgumentNullException("AgentCode", "Agent code is null.");
            }
            this.tokenHeaderValue = value;
            this.agentHeaderValue = value2;
            this.GetTokenManagement();
        }

        private void AnalyzeParam(HttpContextBase context)
        {
            string value = context.Request.Headers[this.TokenKey];
            if (string.IsNullOrEmpty(value))
            {
                throw new ArgumentNullException("Token", "Token code is null.");
            }
            string value2 = context.Request.Headers[this.AgentKey];
            if (string.IsNullOrEmpty(value2))
            {
                throw new ArgumentNullException("AgentCode", "Agent code is null.");
            }
            this.tokenHeaderValue = value;
            this.agentHeaderValue = value2;
            this.GetTokenManagement();
        }

        public static TokenParamModel GetTokenConfig(string agentValue)
        {
            TokenParamDto tokenParam = TokenParamManager.GetTokenParam(agentValue);
            if (tokenParam == null)
            {
                return null;
            }
            return new TokenParamModel
            {
                MCID = tokenParam.MCID,
                SCID = tokenParam.SCID,
                SecretKey = tokenParam.SecretKey,
                ShareKey = tokenParam.ShareKey,
                Signature = tokenParam.Signature,
                TokenExpiredTime = tokenParam.TokenExpiredTime
            };
        }
    }
}
